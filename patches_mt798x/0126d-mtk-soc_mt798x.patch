diff --git a/target/linux/mediatek/patches-5.15/965-mtk_eth_soc.patch b/target/linux/mediatek/patches-5.15/965-mtk_eth_soc.patch
new file mode 100644
index 0000000..ac90d7f
--- /dev/null
+++ b/target/linux/mediatek/patches-5.15/965-mtk_eth_soc.patch
@@ -0,0 +1,57 @@
+diff --git a/drivers/net/ethernet/mediatek/mtk_eth_soc.c b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
+index 1ce786a..d4c0ea8 100644
+--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.c
++++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
+@@ -1246,7 +1246,7 @@ static int mtk_init_fq_dma(struct mtk_eth *eth)
+ 	if (unlikely(!eth->scratch_ring))
+ 		return -ENOMEM;
+ 
+-	phy_ring_tail = eth->phy_scratch_ring + soc->tx.desc_size * (cnt - 1);
++	phy_ring_tail = eth->phy_scratch_ring + (dma_addr_t)soc->tx.desc_size * (cnt - 1);
+ 
+ 	for (j = 0; j < DIV_ROUND_UP(soc->tx.fq_dma_size, MTK_FQ_DMA_LENGTH); j++) {
+ 		len = min_t(int, cnt - j * MTK_FQ_DMA_LENGTH, MTK_FQ_DMA_LENGTH);
+@@ -2585,9 +2585,9 @@ static int mtk_tx_alloc(struct mtk_eth *eth)
+ 	u32 ofs, val;
+ 
+ 	if (MTK_HAS_CAPS(soc->caps, MTK_QDMA))
+-		ring_size = MTK_QDMA_RING_SIZE;
+-	else
+ 		ring_size = soc->tx.dma_size;
++	else
++		ring_size = MTK_QDMA_RING_SIZE;
+ 
+ 	ring->buf = kcalloc(ring_size, sizeof(*ring->buf),
+ 			       GFP_KERNEL);
+@@ -2724,9 +2724,9 @@ static int mtk_rx_alloc(struct mtk_eth *eth, int ring_no, int rx_flag)
+ 	int i;
+ 
+ 	if (MTK_HAS_CAPS(eth->soc->caps, MTK_QDMA))
+-		tx_ring_size = MTK_QDMA_RING_SIZE;
+-	else
+ 		tx_ring_size = soc->tx.dma_size;
++	else
++		tx_ring_size = MTK_QDMA_RING_SIZE;
+ 
+ 	if (rx_flag == MTK_RX_FLAGS_QDMA) {
+ 		if (ring_no)
+@@ -2770,10 +2770,12 @@ static int mtk_rx_alloc(struct mtk_eth *eth, int ring_no, int rx_flag)
+ 	} else {
+ 		struct mtk_tx_ring *tx_ring = &eth->tx_ring;
+ 
+-		ring->dma = tx_ring->dma + tx_ring_size *
+-			    eth->soc->tx.desc_size * (ring_no + 1);
+-		ring->phys = tx_ring->phys + tx_ring_size *
+-			     eth->soc->tx.desc_size * (ring_no + 1);
++		ring->dma = tx_ring->dma + 
++				tx_ring_size * (dma_addr_t)eth->soc->tx.desc_size + 
++				soc->rx.dma_size * (dma_addr_t)eth->soc->rx.desc_size * ring_no;
++		ring->phys = tx_ring->phys + 
++				tx_ring_size * (dma_addr_t)eth->soc->tx.desc_size + 
++				soc->rx.dma_size * (dma_addr_t)eth->soc->rx.desc_size * ring_no;
+ 	}
+ 
+ 	if (!ring->dma)
+-- 
+2.38.1.windows.1
+
