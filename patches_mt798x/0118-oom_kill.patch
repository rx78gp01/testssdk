diff --git a/target/linux/generic/pending-5.15/999-oom_kill.patch b/target/linux/generic/pending-5.15/999-oom_kill.patch
new file mode 100644
index 0000000..f60c919
--- /dev/null
+++ b/target/linux/generic/pending-5.15/999-oom_kill.patch
@@ -0,0 +1,39 @@
+From 4822acb1369637938c1252d534d3356c5e313cde Mon Sep 17 00:00:00 2001
+From: Haifeng Xu <haifeng.xu@shopee.com>
+Date: Mon, 8 May 2023 07:35:38 +0000
+Subject: [PATCH] mm, oom: do not check 0 mask in out_of_memory()
+
+Since commit 60e2793d440a ("mm, oom: do not trigger out_of_memory from the
+#PF"), no user sets gfp_mask to 0.  Remove the 0 mask check and update the
+comments.
+
+Link: https://lkml.kernel.org/r/20230508073538.1168-1-haifeng.xu@shopee.com
+Signed-off-by: Haifeng Xu <haifeng.xu@shopee.com>
+Acked-by: Michal Hocko <mhocko@suse.com>
+Cc: Johannes Weiner <hannes@cmpxchg.org>
+Cc: Shakeel Butt <shakeelb@google.com>
+Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
+---
+ mm/oom_kill.c | 8 +++-----
+ 1 file changed, 3 insertions(+), 5 deletions(-)
+
+diff --git a/mm/oom_kill.c b/mm/oom_kill.c
+index 044e1eed720ee..612b5597d3af4 100644
+--- a/mm/oom_kill.c
++++ b/mm/oom_kill.c
+@@ -1130,12 +1130,10 @@ bool out_of_memory(struct oom_control *oc)
+ 
+ 	/*
+ 	 * The OOM killer does not compensate for IO-less reclaim.
+-	 * pagefault_out_of_memory lost its gfp context so we have to
+-	 * make sure exclude 0 mask - all other users should have at least
+-	 * ___GFP_DIRECT_RECLAIM to get here. But mem_cgroup_oom() has to
+-	 * invoke the OOM killer even if it is a GFP_NOFS allocation.
++	 * But mem_cgroup_oom() has to invoke the OOM killer even
++	 * if it is a GFP_NOFS allocation.
+ 	 */
+-	if (oc->gfp_mask && !(oc->gfp_mask & __GFP_FS) && !is_memcg_oom(oc))
++	if (!(oc->gfp_mask & __GFP_FS) && !is_memcg_oom(oc))
+ 		return true;
+ 
+ 	/*
-- 
2.38.1.windows.1

