# Build OpenWrt using GitHub Actions

name: Cache OpenWrt 23.05.3 downloads

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/openwrt/openwrt.git
  REPO_BRANCH: openwrt-23.05
  REPO_BRANCH_VER: 23.05.3
  REPO_TAG: v23.05.3
  KERNEL_VER: 5.15.161
  END_TAG: 
  ARCH_NAME: ath79
  CPU_NAME: generic
  DEVICE_NAME: dlink_dir-842-c1
  FIRMWARE_NAME: squashfs-sysupgrade.bin
  LLVM_NAME: llvm-bpf-15.0.7.Linux-x86_64
  ARCH_PACKAGES: mips_24kc
  REPO_DEPTH: 0
  FEEDS_CONF: feeds.conf.23053
  CONFIG_FILE: .config_ath79_sfe_multi_23053
  FILES_PATH: files_ath79
  PATCHES_PATH0: patches_23053
  PATCHES_PATH: patches_ath79_23_v6
  UPLOAD_RELEASE: false
  TZ: UTC
  CACHE_DL: false
  BUILD_TOOLCHAIN: false
  PATCH_PMF : true
  TOOLCHAIN_BRANCH_VER: 23.05.3


jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 1

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential ccache ecj clang flex bison fastjar file g++ gawk \
        gettext git java-propose-classpath libncurses5-dev \
        libncursesw5-dev libssl-dev unzip wget curl \
        python3-distutils rsync subversion libattr1-dev patch \
        swig time xsltproc zlib1g-dev libboost-dev zip \
        asciidoc binutils bzip2 libz-dev patch gcc-multilib g++-multilib

        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        [ $REPO_DEPTH -ge 1 ] && git clone --depth $REPO_DEPTH --branch $REPO_TAG --single-branch $REPO_URL openwrt
        [ $REPO_DEPTH -eq 0 ] && git clone --branch $REPO_TAG --single-branch $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Parse toolchain file
      if: env.BUILD_TOOLCHAIN == 'false'
      id: parse-toolchain
      working-directory: /workdir
      run: |
        cd openwrt
        [ ! -d staging_dir/cache ] && mkdir -p staging_dir/cache
        TOOLCHAIN_PATH=releases/$TOOLCHAIN_BRANCH_VER
        SUMS_FILE="https://downloads.cdn.openwrt.org/$TOOLCHAIN_PATH/targets/${{ env.ARCH_NAME }}/${{ env.CPU_NAME }}/sha256sums"
        TOOLCHAIN_STRING="$( curl $SUMS_FILE | grep ".*openwrt-toolchain.*tar.xz")"
        TOOLCHAIN_FILE=$(echo "$TOOLCHAIN_STRING" | sed -n -e 's/.*\(openwrt-toolchain.*\).tar.xz/\1/p')
        TOOLCHAIN_SHA256=$(echo "$TOOLCHAIN_STRING" | cut -d ' ' -f 1)
          
        echo "toolchain-type=external_toolchain" >> $GITHUB_OUTPUT
        echo "TOOLCHAIN_FILE=$TOOLCHAIN_FILE" >> "$GITHUB_ENV"
        echo "TOOLCHAIN_SHA256=$TOOLCHAIN_SHA256" >> "$GITHUB_ENV"
        echo "TOOLCHAIN_PATH=$TOOLCHAIN_PATH" >> "$GITHUB_ENV"

    - name: Cache external toolchain/sdk
      if: env.BUILD_TOOLCHAIN == 'false'
      id: cache-external-toolchain
      uses: actions/cache@v4
      with:
        save-always: true
        path: /workdir/openwrt/staging_dir/cache/
        key: ${{ env.TOOLCHAIN_FILE }}-${{ steps.parse-toolchain.outputs.toolchain-type }}-${{ env.TOOLCHAIN_SHA256 }}

    - name: Download external toolchain/sdk
      if: env.BUILD_TOOLCHAIN == 'false' && steps.cache-external-toolchain.outputs.cache-hit != 'true'
      working-directory: /workdir
      run: |
        cd openwrt/staging_dir/cache
        wget -O - https://downloads.cdn.openwrt.org/${{ env.TOOLCHAIN_PATH }}/targets/${{ env.ARCH_NAME }}/${{ env.CPU_NAME }}/${{ env.TOOLCHAIN_FILE }}.tar.xz \
          | tar --xz -xf -
        wget -O - https://downloads.cdn.openwrt.org/${{ env.TOOLCHAIN_PATH }}/targets/${{ env.ARCH_NAME }}/${{ env.CPU_NAME }}/${LLVM_NAME}.tar.xz \
          | tar --xz -xf -
        chown -R $USER:$GROUPS /workdir/openwrt/staging_dir/cache

    - name: Cache OpenWrt
      uses: actions/cache@v4
      if: env.CACHE_DL == 'true'
      env:
        cache-name: cache-openwrt-dl
      with:
        save-always: true
        path: |
          openwrt/dl
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.REPO_BRANCH }}
#        restore-keys: |
#          ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.REPO_BRANCH }}
    
    - name: Check cache
      run: |
        [ -d openwrt/staging_dir ] && echo "Found staging_dir cache" || echo "No staging_dir cache"
        [ -d openwrt/build_dir ] && echo "Found build_dir cache" || echo "No build_dir cache"
        [ -d openwrt/dl ] && echo "Found dl cache" ||  echo "No dl cache"
        [ -L openwrt/staging_dir/cache/llvm-bpf ] && cp -P openwrt/staging_dir/cache/llvm-bpf openwrt/llvm-bpf && \
        cp -R openwrt/staging_dir/cache/${LLVM_NAME} openwrt
        [ -d openwrt/staging_dir/cache/${{ env.TOOLCHAIN_FILE }} ] && cp -R openwrt/staging_dir/cache/${{ env.TOOLCHAIN_FILE }}/toolchain-* openwrt/staging_dir
        ls -al openwrt
        ls -l /workdir/openwrt
        [ -d openwrt/dl ] && ls -l /workdir/openwrt/dl
        ls -l /workdir/openwrt/staging_dir/cache
        ls -l /workdir/openwrt/staging_dir/

    - name: Setup feeds
      run: |
        [ -e $FEEDS_CONF ] && cp $FEEDS_CONF openwrt/feeds.conf
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Apply patches
      run: |
        [ -d $PATCHES_PATH0 ] && mv $PATCHES_PATH0 openwrt/$PATCHES_PATH0
        [ -d $PATCHES_PATH ] && mv $PATCHES_PATH openwrt/$PATCHES_PATH
        cd openwrt
        wget https://github.com/openwrt/openwrt/commit/75e78bcaab847557ce1782eb2dea9dff9a029171.patch
        git apply -R 75e78bcaab847557ce1782eb2dea9dff9a029171.patch
        [ $PATCH_PMF == 'true' ] && sed -i 's|\(.*\)gt 0\(.*\)"WPA-PSK-SHA256"|\1gt 1\2"WPA-PSK-SHA256"|' package/network/services/hostapd/files/hostapd.sh
        sed -i 's/kmod-ath10k-ct ath10k-firmware-qca9888-ct/kmod-ath10k-ct ath10k-firmware-qca9888-ct-htt/g' target/linux/ath79/image/generic.mk
        [ -d $PATCHES_PATH0 ] && for FILE in $(ls $PATCHES_PATH0 | grep .patch); do git apply --check $PATCHES_PATH0/$FILE; git apply $PATCHES_PATH0/$FILE; done
        [ -d $PATCHES_PATH ] && for FILE in $(ls $PATCHES_PATH | grep .patch); do git apply --check $PATCHES_PATH/$FILE; git apply $PATCHES_PATH/$FILE; done
        git status -s

    - name: Load custom files
      run: |
        [ -d $FILES_PATH ] && mv $FILES_PATH openwrt/files
        cd openwrt && git status -s

    - name: Load custom config
      run: |
        [ -f $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config && echo 'Custom config loaded!' || echo 'No custom config!'

    - name: Configure external toolchain
      if: env.BUILD_TOOLCHAIN == 'false' && steps.parse-toolchain.outputs.toolchain-type == 'external_toolchain'
      working-directory: /workdir
      run: |
        cd openwrt
        sed -i 's/CONFIG_BUILD_NLS=y/CONFIG_BUILD_NLS=n/g' scripts/ext-toolchain.sh
        ./scripts/ext-toolchain.sh \
          --toolchain staging_dir/toolchain-* \
          --overwrite-config \
          --config ${{ env.ARCH_NAME }}/${{ env.CPU_NAME }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make -j$(nproc) defconfig V=s 2>&1 | tee defconfig.log
        make -j$(nproc) toolchain/install V=sc
        make -j8 download V=s 2>&1 | tee download.log
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
