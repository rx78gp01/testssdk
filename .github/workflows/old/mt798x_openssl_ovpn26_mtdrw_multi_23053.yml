# Build OpenWrt using GitHub Actions

name: Build OpenWrt 23.05.3 mt798x openssl ovpn26 mtdrw multi

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/openwrt/openwrt.git
  REPO_BRANCH: openwrt-23.05
  REPO_BRANCH_VER: 23.05.3
  REPO_TAG: v23.05.3
  KERNEL_VER: 5.15.160
  END_TAG: 
  ARCH_NAME: mediatek
  CPU_NAME: filogic
  DEVICE_NAME: xiaomi_mi-router-ax3000t
  FIRMWARE_NAME: squashfs-sysupgrade.bin
  LLVM_NAME: llvm-bpf-15.0.7.Linux-x86_64
  ARCH_PACKAGES: aarch64_cortex-a53
  REPO_DEPTH: 0
  FEEDS_CONF: feeds.conf.23053s
  CONFIG_FILE: .config_mt798x_openssl_ovpn26_mtdrw_multi_23053s
  FILES_PATH: files_mt798x
  PATCHES_PATH0: patches_23053
  PATCHES_PATH1: none
  PATCHES_PATH: patches_mt798x
  UPLOAD_RELEASE: true
  TZ: UTC
  CACHE_DL: true
  BUILD_TOOLCHAIN: false
  PATCH_PMF : true
  TOOLCHAIN_BRANCH_VER: 23.05.3

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 1

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential ccache ecj clang flex bison fastjar file g++ gawk \
        gettext git java-propose-classpath libncurses5-dev \
        libncursesw5-dev libssl-dev unzip wget curl \
        python3-distutils rsync subversion libattr1-dev patch \
        swig time xsltproc zlib1g-dev libboost-dev zip \
        asciidoc binutils bzip2 libz-dev patch gcc-multilib g++-multilib

        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        [ $REPO_DEPTH -ge 1 ] && git clone --depth $REPO_DEPTH --branch $REPO_TAG --single-branch $REPO_URL openwrt
        [ $REPO_DEPTH -eq 0 ] && git clone --branch $REPO_BRANCH --single-branch $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Parse toolchain file
      if: env.BUILD_TOOLCHAIN == 'false'
      id: parse-toolchain
      working-directory: /workdir
      run: |
        cd openwrt
        [ ! -d staging_dir/cache ] && mkdir -p staging_dir/cache
        TOOLCHAIN_PATH=releases/$TOOLCHAIN_BRANCH_VER
        SUMS_FILE="https://downloads.cdn.openwrt.org/$TOOLCHAIN_PATH/targets/${{ env.ARCH_NAME }}/${{ env.CPU_NAME }}/sha256sums"
        TOOLCHAIN_STRING="$( curl $SUMS_FILE | grep ".*openwrt-toolchain.*tar.xz")"
        TOOLCHAIN_FILE=$(echo "$TOOLCHAIN_STRING" | sed -n -e 's/.*\(openwrt-toolchain.*\).tar.xz/\1/p')
        TOOLCHAIN_SHA256=$(echo "$TOOLCHAIN_STRING" | cut -d ' ' -f 1)
          
        echo "toolchain-type=external_toolchain" >> $GITHUB_OUTPUT
        echo "TOOLCHAIN_FILE=$TOOLCHAIN_FILE" >> "$GITHUB_ENV"
        echo "TOOLCHAIN_SHA256=$TOOLCHAIN_SHA256" >> "$GITHUB_ENV"
        echo "TOOLCHAIN_PATH=$TOOLCHAIN_PATH" >> "$GITHUB_ENV"

    - name: Cache external toolchain/sdk
      if: env.BUILD_TOOLCHAIN == 'false'
      id: cache-external-toolchain
      uses: actions/cache@v4
      with:
        save-always: true
        path: /workdir/openwrt/staging_dir/cache/
        key: ${{ env.TOOLCHAIN_FILE }}-${{ steps.parse-toolchain.outputs.toolchain-type }}-${{ env.TOOLCHAIN_SHA256 }}

    - name: Download external toolchain/sdk
      if: env.BUILD_TOOLCHAIN == 'false' && steps.cache-external-toolchain.outputs.cache-hit != 'true'
      working-directory: /workdir
      run: |
        cd openwrt/staging_dir/cache
        wget -O - https://downloads.cdn.openwrt.org/${{ env.TOOLCHAIN_PATH }}/targets/${{ env.ARCH_NAME }}/${{ env.CPU_NAME }}/${{ env.TOOLCHAIN_FILE }}.tar.xz \
          | tar --xz -xf -
        wget -O - https://downloads.cdn.openwrt.org/${{ env.TOOLCHAIN_PATH }}/targets/${{ env.ARCH_NAME }}/${{ env.CPU_NAME }}/${LLVM_NAME}.tar.xz \
          | tar --xz -xf -
        chown -R $USER:$GROUPS /workdir/openwrt/staging_dir/cache

    - name: Cache OpenWrt
      uses: actions/cache@v4
      if: env.CACHE_DL == 'true'
      env:
        cache-name: cache-openwrt-dl
      with:
        save-always: true
        path: |
          openwrt/dl
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.REPO_BRANCH }}-${{ env.ARCH_NAME }}-${{ env.CPU_NAME }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.REPO_BRANCH }}
    
    - name: Check cache
      run: |
        [ -d openwrt/staging_dir ] && echo "Found staging_dir cache" || echo "No staging_dir cache"
        [ -d openwrt/build_dir ] && echo "Found build_dir cache" || echo "No build_dir cache"
        [ -d openwrt/dl ] && echo "Found dl cache" ||  echo "No dl cache"
        [ -L openwrt/staging_dir/cache/llvm-bpf ] && cp -P openwrt/staging_dir/cache/llvm-bpf openwrt/llvm-bpf && \
        cp -R openwrt/staging_dir/cache/${LLVM_NAME} openwrt
        [ -d openwrt/staging_dir/cache/${{ env.TOOLCHAIN_FILE }} ] && cp -R openwrt/staging_dir/cache/${{ env.TOOLCHAIN_FILE }}/toolchain-* openwrt/staging_dir
        ls -al openwrt
        ls -l /workdir/openwrt
        [ -d openwrt/dl ] && ls -l /workdir/openwrt/dl
        ls -l /workdir/openwrt/staging_dir/cache
        ls -l /workdir/openwrt/staging_dir/

    - name: Setup feeds
      run: |
        [ -e $FEEDS_CONF ] && cp $FEEDS_CONF openwrt/feeds.conf
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Apply patches
      run: |
        [ -d $PATCHES_PATH1 ] && mv $PATCHES_PATH0 openwrt/$PATCHES_PATH0
        [ -d $PATCHES_PATH ] && mv $PATCHES_PATH openwrt/$PATCHES_PATH
        cd openwrt
        [ $PATCH_PMF == 'true' ] && sed -i 's|\(.*\)gt 0\(.*\)"WPA-PSK-SHA256"|\1gt 1\2"WPA-PSK-SHA256"|' package/network/services/hostapd/files/hostapd.sh
        [ -d $PATCHES_PATH1 ] && for FILE in $(ls $PATCHES_PATH0 | grep .patch); do git apply --check $PATCHES_PATH0/$FILE; git apply $PATCHES_PATH0/$FILE; done
        [ -d $PATCHES_PATH ] && for FILE in $(ls $PATCHES_PATH | grep .patch); do git apply --check $PATCHES_PATH/$FILE; git apply $PATCHES_PATH/$FILE; done
        git status -s

    - name: Load custom files
      run: |
        [ -d $FILES_PATH ] && mv $FILES_PATH openwrt/files
        cd openwrt && git status -s

    - name: Load custom config
      run: |
        [ -f $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config && echo 'Custom config loaded!' || echo 'No custom config!'

    - name: Setup ccache
      uses: Chocobo1/setup-ccache-action@v1
      with:
          install_ccache: false
          update_packager_index: false
          override_cache_key: ${{ env.TOOLCHAIN_SHA256 }}
          ccache_options: |
            cache_dir=/home/runner/.ccache

    - name: Configure ccache and apply fixes
      if: env.BUILD_TOOLCHAIN == 'false'
      working-directory: /workdir
      env:
        SYSTEM_CCACHE_CONF: /home/runner/.ccache/ccache.conf
      run: |
        [ ! -f $SYSTEM_CCACHE_CONF ] && touch $SYSTEM_CCACHE_CONF && chown -R $USER:$GROUPS /home/runner/.ccache
        echo compiler_type=gcc >> $SYSTEM_CCACHE_CONF
        echo hash_dir=false >> $SYSTEM_CCACHE_CONF

    - name: Configure external toolchain
      if: env.BUILD_TOOLCHAIN == 'false' && steps.parse-toolchain.outputs.toolchain-type == 'external_toolchain'
      working-directory: /workdir
      run: |
        cd openwrt
        ./scripts/ext-toolchain.sh \
          --toolchain staging_dir/toolchain-* \
          --overwrite-config \
          --config ${{ env.ARCH_NAME }}/${{ env.CPU_NAME }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make -j$(nproc) defconfig V=s 2>&1 | tee defconfig.log
        make -j$(nproc) toolchain/install V=sc
        make -j8 download V=s 2>&1 | tee download.log
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    
    - name: Config target
      run: |
        cd openwrt
        grep '^CONFIG_TARGET_NAME.*' .config | sed -r 's/^CONFIG_TARGET_NAME="(.*)"/\1/' > TARGET_NAME
        [ -s TARGET_NAME ] && echo "TARGET_NAME=$(cat TARGET_NAME)" >> $GITHUB_ENV
        grep '^CONFIG_TARGET_ARCH_PACKAGES.*' .config | sed -r 's/^CONFIG_TARGET_ARCH_PACKAGES="(.*)"/\1/' > TARGET_ARCH_PACKAGES
        [ -s TARGET_ARCH_PACKAGES ] && echo "TARGET_ARCH_PACKAGES=$(cat TARGET_ARCH_PACKAGES)" >> $GITHUB_ENV
        echo -e "Arch: ${ARCH_NAME}\nCPU: ${CPU_NAME}\nDevice: ${DEVICE_NAME}\nTag: $(cat TARGET_NAME)\nArch packages: $(cat TARGET_ARCH_PACKAGES)"

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo "TARGET NAME: $TARGET_NAME"
        echo "TARGET ARCH PACKAGES: $TARGET_ARCH_PACKAGES"
        rm -f target/linux/generic/backport-5.15/704-15-v5.19-net-mtk_eth_soc-move-MAC_MCR-setting-to-mac_finish.patch
        rm -f target/linux/generic/pending-5.15/735-net-mediatek-mtk_eth_soc-release-MAC_MCR_FORCE_LINK-.patch
        rm -f target/linux/generic/pending-5.15/736-net-ethernet-mtk_eth_soc-fix-PPE-hanging-issue.patch
        rm -f target/linux/generic/backport-5.15/702-v5.19-01-arm64-dts-mediatek-mt7622-add-support-for-coherent-D.patch
        rm -f target/linux/generic/backport-5.15/702-v5.19-04-arm64-dts-mediatek-mt7622-introduce-nodes-for-Wirele.patch
        echo -e "Available core: $(nproc)"
        COMPILE_THREADS=$(($(nproc) + 1))
        echo "Compile threads: ${COMPILE_THREADS}"
        make -j${COMPILE_THREADS} V=s 2>&1 > build.log || make -j1 V=s
        [ -f bin/targets/$ARCH_NAME/$CPU_NAME/openwrt-${REPO_BRANCH_VER}-${ARCH_NAME}-${CPU_NAME}-${DEVICE_NAME}-${FIRMWARE_NAME} ] && echo "status=success" >> $GITHUB_OUTPUT
        cp .config bin/targets/$ARCH_NAME/$CPU_NAME/buildconfig
        [ -f build_dir/target-aarch64-openwrt-linux-musl_musl/linux-${ARCH_NAME}_${CPU_NAME}/linux-${KERNEL_VER}/.config ] && cp build_dir/target-aarch64-openwrt-linux-musl_musl/linux-${ARCH_NAME}_${CPU_NAME}/linux-${KERNEL_VER}/.config bin/targets/$ARCH_NAME/$CPU_NAME/kconfig
        zip -q bin/targets/$ARCH_NAME/$CPU_NAME/log.zip build.log defconfig.log download.log
        [ -d bin/packages/$TARGET_ARCH_PACKAGES/ ] && zip -r bin/targets/$ARCH_NAME/$CPU_NAME/openwrt-${REPO_BRANCH_VER}-${ARCH_NAME}-${CPU_NAME}-${TARGET_ARCH_PACKAGES}_base_feeds_packages.zip bin/packages/$TARGET_ARCH_PACKAGES/
        echo "Make Completed"

    - name: Prepare release
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        touch release.txt
        echo "Branch: $REPO_BRANCH" >> release.txt
        echo "TAG: $REPO_TAG" >> release.txt
        echo "Date: $(date +"%Y-%m-%d_%H:%M")" >> release.txt
        echo "Arch: $ARCH_NAME" >> release.txt
        echo "CPU: $CPU_NAME" >> release.txt
        echo "Deivce: $DEVICE_NAME" >> release.txt
        cd openwrt/bin/targets/$ARCH_NAME/$CPU_NAME
        [ -d packages ] && zip -r openwrt-${REPO_BRANCH_VER}-${ARCH_NAME}-${CPU_NAME}-packages_all_kmods.zip packages/
        [ -d packages ] && rm -rf packages
        sha256sum -b openwrt-${REPO_BRANCH_VER}-${ARCH_NAME}-${CPU_NAME}-packages_all_kmods.zip >> sha256sums
        sha256sum -b openwrt-${REPO_BRANCH_VER}-${ARCH_NAME}-${CPU_NAME}-${TARGET_ARCH_PACKAGES}_base_feeds_packages.zip >> sha256sums
        zip -r openwrt-${REPO_BRANCH_VER}-${ARCH_NAME}-${CPU_NAME}-firmwares_$(date +"%Y-%m-%d_%H-%M").zip . -x log.zip \*.zst
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
        echo "TAG_DATE=$(date +"%Y-%m-%d_%H_%M")" >> $GITHUB_ENV

    - name: Upload release
      uses: softprops/action-gh-release@v2
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: openwrt-${{ env.REPO_BRANCH_VER }}_mt798x_openssl_ovpn26_multi_with_mtd-rw ${{ env.KERNEL_VER }}${{ env.END_TAG }}
        body_path: release.txt
        files: ${{ env.FIRMWARE_PATH }}/*
